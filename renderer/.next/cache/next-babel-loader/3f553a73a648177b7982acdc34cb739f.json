{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport axios from \"axios\";\nimport { ResponsiveContainer, PieChart, Pie, Cell, Legend, Tooltip } from \"recharts\";\nimport { colors } from \"../constants\";\n\nvar PieGraph = function PieGraph(_ref) {\n  var type = _ref.type,\n      statement = _ref.statement,\n      start = _ref.start,\n      end = _ref.end;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      data = _React$useState2[0],\n      setData = _React$useState2[1];\n\n  React.useEffect(function () {\n    var fetchData = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(type, statement, start, end) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios.get(\"\".concat(process.env.NEXT_PUBLIC_API_URL, \"/graph/Pie?\").concat(type === \"date\" && end !== \"\" ? \"start=\".concat(start, \"&end=\").concat(end) : \"statement=\".concat(statement)));\n\n              case 2:\n                res = _context.sent;\n                setData(res.data.slices);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchData(_x, _x2, _x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    fetchData(type, statement, start, end);\n  }, []);\n  return __jsx(ResponsiveContainer, {\n    width: 730,\n    height: 250\n  }, __jsx(PieChart, null, __jsx(Pie, {\n    data: data,\n    dataKey: \"actualValue\",\n    nameKey: \"label\",\n    fill: \"#8884d8\",\n    label: true\n  }, data.map(function (entry, index) {\n    return __jsx(Cell, {\n      key: index,\n      fill: colors[index % colors.length]\n    });\n  })), __jsx(Legend, {\n    align: \"right\",\n    verticalAlign: \"middle\",\n    layout: \"vertical\"\n  }), __jsx(Tooltip, null)));\n};\n\nexport default PieGraph;","map":null,"metadata":{},"sourceType":"module"}