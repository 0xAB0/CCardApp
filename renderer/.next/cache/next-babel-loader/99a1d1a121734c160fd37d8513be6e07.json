{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete, { createFilterOptions } from \"@material-ui/lab/Autocomplete\";\nvar filter = createFilterOptions();\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      marginTop: theme.spacing(1)\n    },\n    box: {\n      margin: theme.spacing(3, 1)\n    }\n  };\n});\nexport default function Import() {\n  var router = useRouter();\n  var classes = useStyles();\n\n  var _useState = useState([]),\n      rows = _useState[0],\n      setRows = _useState[1];\n\n  var _useState2 = useState([]),\n      categoryList = _useState2[0],\n      setCategoryList = _useState2[1];\n\n  var handleCategoryChange = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event, newValue, rowId) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!newValue) {\n                _context.next = 4;\n                break;\n              }\n\n              setRows(rows.map(function (item) {\n                return item.rowId === rowId ? _objectSpread(_objectSpread({}, item), {}, {\n                  category: newValue\n                }) : item;\n              }));\n              _context.next = 4;\n              return axios.put(\"\".concat(process.env.NEXT_PUBLIC_API_URL, \"/import/\").concat(router.query.id, \"/\").concat(rowId, \"/category\"), newValue, {\n                headers: {\n                  \"Content-Type\": \"text/plain\"\n                }\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleCategoryChange(_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleCommit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var res, query;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return axios.put(\"\".concat(process.env.NEXT_PUBLIC_API_URL, \"/import/\").concat(router.query.id, \"/commit\"));\n\n            case 2:\n              res = _context2.sent;\n\n              if (res.data.status === \"ok\") {\n                query = {\n                  type: \"statement\",\n                  statement: router.query.name\n                };\n                router.push({\n                  pathname: \"/xray\",\n                  query: query\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleCommit() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    var fetchData = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return axios.get(\"\".concat(process.env.NEXT_PUBLIC_API_URL, \"/import/\").concat(id, \"/data\"));\n\n              case 2:\n                res = _context3.sent;\n                setRows(res.data.rows);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function fetchData(_x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    fetchData(router.query.id);\n  }, [router.query]);\n  useEffect(function () {\n    var fetchCategoryList = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return axios.get(\"\".concat(process.env.NEXT_PUBLIC_API_URL, \"/category/list\"));\n\n              case 2:\n                res = _context4.sent;\n                setCategoryList(res.data);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function fetchCategoryList() {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    fetchCategoryList();\n  }, []);\n  return __jsx(Container, {\n    className: classes.root\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    gutterBottom: true\n  }, \"Import\"), __jsx(TableContainer, {\n    component: Paper\n  }, __jsx(Table, null, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, null, \"Date\"), __jsx(TableCell, null, \"Description\"), __jsx(TableCell, null, \"Amount\"), __jsx(TableCell, null, \"Category\"))), __jsx(TableBody, null, rows.map(function (row) {\n    return __jsx(TableRow, {\n      key: row.rowId\n    }, __jsx(TableCell, {\n      component: \"th\",\n      scope: \"row\"\n    }, row.date), __jsx(TableCell, null, row.description), __jsx(TableCell, null, row.amount), __jsx(TableCell, null, __jsx(Autocomplete, {\n      value: row.category,\n      onChange: function onChange(event, newValue) {\n        handleCategoryChange(event, newValue, row.rowId);\n      },\n      filterOptions: function filterOptions(options, params) {\n        var filtered = filter(options, params); // Suggest the creation of a new value\n\n        if (params.inputValue !== \"\") {\n          filtered.push(params.inputValue);\n        }\n\n        return filtered;\n      },\n      selectOnFocus: true,\n      clearOnBlur: true,\n      handleHomeEndKeys: true,\n      options: categoryList,\n      getOptionLabel: function getOptionLabel(option) {\n        // Value selected with enter, right from the input\n        if (typeof option === \"string\") {\n          return option;\n        } // Add \"xxx\" option created dynamically\n\n\n        if (option.inputValue) {\n          return option.inputValue;\n        } // Regular option\n\n\n        return option.title;\n      },\n      size: \"small\",\n      freeSolo: true,\n      renderInput: function renderInput(params) {\n        return __jsx(TextField, params);\n      }\n    })));\n  })))), __jsx(Box, {\n    textAlign: \"right\",\n    className: classes.box\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleCommit\n  }, \"Commit\")));\n}","map":null,"metadata":{},"sourceType":"module"}