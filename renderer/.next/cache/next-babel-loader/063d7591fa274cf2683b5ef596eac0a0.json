{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useQuery } from \"react-query\";\nimport axios from \"axios\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport Paper from \"@material-ui/core/Paper\";\n\nvar fetchSummaryData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(name, type, statement, start, end) {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios.get(\"\".concat(process.env.NEXT_PUBLIC_API_URL, \"/summary/\").concat(name, \"?\").concat(type === \"date\" && end !== \"\" ? \"start=\".concat(start, \"&end=\").concat(end) : \"statement=\".concat(statement)));\n\n          case 2:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res.data);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function fetchSummaryData(_x, _x2, _x3, _x4, _x5) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar SummaryTable = function SummaryTable(_ref2) {\n  var name = _ref2.name,\n      type = _ref2.type,\n      statement = _ref2.statement,\n      start = _ref2.start,\n      end = _ref2.end;\n\n  var _useQuery = useQuery([name, type, statement, start, end], fetchSummaryData),\n      rows = _useQuery.data,\n      error = _useQuery.error,\n      isLoading = _useQuery.isLoading;\n\n  if (isLoading) return \"Loading...\";\n  if (error) return \"An error has occurred: \" + error.message;\n  return __jsx(React.Fragment, null, __jsx(Typography, {\n    variant: \"h6\",\n    gutterBottom: true\n  }, name), __jsx(TableContainer, {\n    component: Paper,\n    style: {\n      width: 250\n    }\n  }, __jsx(Table, {\n    size: \"small\"\n  }, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, null, \"Name\"), __jsx(TableCell, null, \"Value\"))), __jsx(TableBody, null, rows.map(function (row, index) {\n    return __jsx(TableRow, {\n      key: index\n    }, __jsx(TableCell, null, row.name), __jsx(TableCell, null, row.value));\n  })))));\n};\n\nexport default SummaryTable;","map":null,"metadata":{},"sourceType":"module"}